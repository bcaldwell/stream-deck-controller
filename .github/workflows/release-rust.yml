name: Release
on: push
#     tags:
#       - "v*"

jobs:
  build_rpi:
    name: Build client for Raspberry Pi
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.1
      - name: Setup toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: arm-unknown-linux-gnueabihf
          override: true
      - uses: Swatinem/rust-cache@v2
        with:
          key: arm-unknown-linux-gnueabihf
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Setup rpi build environment
        uses: docker/build-push-action@v3
        with:
          context: ./build/rpi
          file: ./build/rpi/Dockerfile.rpi
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/build-cache:stream-deck-controller-rpi-builder
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/build-cache:stream-deck-controller-rpi-builder
          cache-to: type=inline
      - name: Run build
        run: docker run --rm -v $(pwd):/src -w /src ${{ secrets.DOCKERHUB_USERNAME }}/build-cache:stream-deck-controller-rpi-builder /build-pi-armv6hf.sh build --release --locked -p client
      - name: Upload artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: stream-deck-client-arm-raspberry-pi
          path: target/arm-unknown-linux-gnueabihf/release/client
          if-no-files-found: error
  build_artifacts:
    name: Build artifacts for ${{ matrix.asset_name_suffix }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            asset_name_suffix: x86_64-linux
            use_cross: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            asset_name_suffix: aarch64-linux
            use_cross: true
          # - os: ubuntu-latest
          #   target: arm-unknown-linux-gnueabihf
          #   asset_name_suffix: arm-linux
          # - os: macos-latest
          #   target: x86_64-apple-darwin
          #   asset_name_suffix: x86_64-darwin
          # - os: macos-latest
          #   target: aarch64-apple-darwin
          #   asset_name_suffix: aarch64-darwin

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # - name: Install c dependencies
      #   if: matrix.os == 'ubuntu-latest'
      #   run: sudo apt-get install -qq libssl-dev libusb-1.0-0-dev libhidapi-dev

      - name: Setup toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - uses: actions-rs/cargo@v1
        if: matrix.use_cross == true
        with:
          use-cross: true
          command: build
          args: --release --locked --target ${{ matrix.target }} -p server

      - uses: actions-rs/cargo@v1
        if: matrix.use_cross != true
        with:
          command: build
          args: --release --locked --target ${{ matrix.target }} -p server

      # - name: Rename client artifact
      #   run: mv target/release/client target/release/stream-deck-controller-client-${{ matrix.asset_name_suffix }}

      - name: Rename server artifact
        continue-on-error: true
        run: mv target/${{ matrix.target }}/release/server target/release/stream-deck-controller-server-${{ matrix.asset_name_suffix }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: stream-deck-controller-server-${{ matrix.asset_name_suffix }}
          path: target/release/stream-deck-controller-server-${{ matrix.asset_name_suffix }}

  deploy_artifacts:
    name: Create release
    needs: [build_artifacts]
    runs-on: ubuntu-latest
    steps:
      - name: Create release directory
        run: mkdir release
      - name: Get artifacts
        uses: actions/download-artifact@v3
        with:
          path: release
      - name: Generate Checksum
        uses: jmgilman/actions-generate-checksum@v1.0.0
        with:
          patterns: "release/*/*"
      - run: ls -R release && cat checksum.txt

  docker:
    runs-on: ubuntu-latest
    needs: [build_artifacts]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Create release directory
        run: mkdir release
      - name: Get artifacts
        uses: actions/download-artifact@v3
        with:
          path: release

      - name: move arifacts for docker build
        run: |
          mkdir -p build/linux/amd64
          mv release/stream-deck-controller-server-x86_64-linux/stream-deck-controller-server-x86_64-linux build/linux/amd64/server
          mkdir -p build/linux/arm64
          mv release/stream-deck-controller-server-aarch64-linux/stream-deck-controller-server-aarch64-linux build/linux/arm64/server

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/stream-deck-controller
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=sha,format=long

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: ./build
          platforms: linux/amd64,linux/arm64
          # push: ${{ github.event_name != 'pull_request' }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/stream-deck-controller:latest
          cache-to: type=inline

  # - name: Create release with artifact
  #   uses: softprops/action-gh-release@v1
  #   with:
  #     tag_name: ${{ github.event.inputs.tag }}
  #     fail_on_unmatched_files: true
  #     generate_release_notes: true
  #     files: |
  #       release/*/*
  #       checksum.txt
